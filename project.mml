{
  "bounds": [
    28.1799,
    59.3332,
    30.7178,
    60.1579
  ],
  "center": [
    29.6191,
    59.7619,
    7
  ],
  "format": "png8",
  "interactivity": false,
  "minzoom": 6,
  "maxzoom": 22,
  "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
  "Stylesheet": [
    "style.mss",
    "places.mss",
    "roads.mss",
    "contours.mss",
    "nature.mss",
    "rails.mss",
    "buildings.mss"
  ],
  "Layer": [
    {
      "extent": [
        22.71561208176848,
        51.024301313540015,
        32.79624694636674,
        56.36838768819846
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,place,coalesce(\"name:be\", name) AS name from planet_osm_polygon where place in ('village', 'town', 'city', 'hamlet', 'isolated_dwelling')) as placep",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2528690.37,6625593.47,3650861.51,7632103.5",
        "dbname": "gis"
      },
      "id": "placep",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "placep",
      "geometry": "polygon"
    },
    {
      "extent": [
        20.67154065835024,
        53.83894644201676,
        41.64409284452203,
        63.124710468885965
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way from planet_osm_polygon where \"natural\"='wood' or landuse = 'forest' or leisure='park') as forest",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis"
      },
      "id": "forest",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "forest"
    },
    {
      "extent": [
        -179.9999999749438,
        -85.051,
        179.9999999749438,
        85.051
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way from planet_osm_polygon where landuse in ('residential', 'commercial', 'industrial', 'farmyard') or amenity is not null or power is not null) as landuse",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis"
      },
      "id": "residential",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "residential"
    },
    {
      "geometry": "polygon",
      "extent": [
        7.292175469141206,
        46.769969165920045,
        32.79624694636674,
        56.36838768819846
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(SELECT\n way,\nCASE WHEN \"natural\" IN ('marsh', 'mud') THEN \"natural\" ELSE wetland END AS int_wetland\nFROM planet_osm_polygon\n WHERE \"natural\" IN ('marsh', 'mud', 'wetland')\nAND building IS NULL\nAND way_area > 0.01*!pixel_width!::real*!pixel_height!::real\nORDER BY z_order, way_area DESC\n) AS water_areas_overlay",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "811761.26,5904607.68,3650861.51,7632103.5",
        "dbname": "gis"
      },
      "id": "water-areas-overlay",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "water-areas-overlay"
    },
    {
      "geometry": "linestring",
      "extent": [
        22.467556599271887,
        49.10078991480273,
        33.24694070756235,
        56.36710850981006
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,waterway,coalesce(\"name:be\", name) AS name,ST_Length(way) as length from planet_osm_line where waterway in ('stream', 'river','drain','ditch','canal') and tunnel is null) as rivers",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2501076.96,6291980.67,3701032.51,7631846.4",
        "dbname": "gis"
      },
      "id": "rivers",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "rivers"
    },
    {
      "geometry": "polygon",
      "extent": [
        -180,
        -85.051,
        180,
        85.051
      ],
      "id": "ocean",
      "class": "",
      "Datasource": {
        "type": "shape",
        "file": "data/water-polygons-split-3857/water_polygons.shp"
      },
      "layer": null,
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "ocean"
    },
    {
      "extent": [
        22.71561208176848,
        51.024301313540015,
        32.79624694636674,
        56.36838768819846
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,coalesce(\"name:be\", name) AS name,way_area from planet_osm_polygon where \"natural\"='water' or waterway='riverbank') as lakes",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2528690.37,6625593.47,3650861.51,7632103.5",
        "dbname": "gis",
        "id": "lakes",
        "project": "lineart",
        "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
      },
      "id": "lakes",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "lakes",
      "geometry": "polygon"
    },
    {
      "geometry": "linestring",
      "extent": [
        20.67154065835024,
        53.84331987480243,
        41.669801370312136,
        63.12363083529556
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,admin_level from planet_osm_roads where admin_level in ('6', '4', '2')) as admin",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis"
      },
      "id": "admin",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "admin"
    },
    {
      "geometry": "linestring",
      "extent": [
        20.67154065835024,
        53.84331987480243,
        41.669801370312136,
        63.12363083529556
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,admin_level from planet_osm_roads where admin_level in ('4', '2')) as admin",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis"
      },
      "id": "admin-line",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "admin-line"
    },
    {
      "geometry": "linestring",
      "extent": [
        -0.00013888888888888892,
        49.999861111111116,
        59.999861111111116,
        69.99986111111112
      ],
      "id": "contours",
      "class": "",
      "Datasource": {
        "type": "shape",
        "file": "data/gmted/gmted-contour25g.shp",
        "id": "contours",
        "project": "lineart",
        "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
      },
      "layer": null,
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "advanced": {},
      "name": "contours"
    },
    {
      "geometry": "linestring",
      "extent": [
        19.290104407572024,
        41.16666668212161,
        179.9537075425649,
        76.98934997681025
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way from planet_osm_line where power='line') as power",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis"
      },
      "id": "power",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "power"
    },
    {
      "geometry": "linestring",
      "extent": [
        -179.9999999749438,
        -85.051,
        179.9999999749438,
        85.051
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way, railway from planet_osm_line where railway in ('rail', 'narrow_gauge') and service is null and tunnel is null) as railway",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis"
      },
      "id": "railway",
      "class": "railway",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "railway"
    },
    {
      "extent": [
        -179.9999999749438,
        -85.051,
        179.9999999749438,
        85.051
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way, left(md5(\"addr:street\"), 1) as streethash,left(md5(\"addr:postcode\"), 1) as posthash, case when way_area > 5*5*!pixel_height!*!pixel_width! then 'yes' else 'almost' end as visible from planet_osm_polygon where building is not null and way_area > 3*3*!pixel_height!*!pixel_width!) as buildings",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis"
      },
      "id": "buildings",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "buildings",
      "geometry": "polygon"
    },
    {
      "geometry": "linestring",
      "extent": [
        -179.9999999749438,
        -85.051,
        179.9999999749438,
        85.051
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way, highway, tracktype, (case when living_street is not null or service is not null then 1 else 0 end) as service from planet_osm_line where highway in ('path', 'cycleway', 'footway', 'service', 'track','pedestrian','living_street','residential', 'unclassified', 'tertiary', 'secondary', 'primary', 'trunk', 'motorway', 'tertiary_link', 'secondary_link', 'primary_link', 'trunk_link', 'motorway_link') and tunnel in ('yes', 'true', '1') order by z_order) as tunnels",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis"
      },
      "id": "tunnels",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "tunnels"
    },
    {
      "geometry": "linestring",
      "extent": [
        22.467556599271887,
        49.10078991480273,
        33.24694070756235,
        56.36710850981006
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way, highway, tracktype, (case when living_street is not null or service is not null then 1 else 0 end) as service from planet_osm_line where highway in ('path', 'cycleway', 'footway', 'service', 'track','pedestrian','living_street','residential', 'unclassified', 'tertiary', 'secondary', 'primary', 'trunk', 'motorway', 'tertiary_link', 'secondary_link', 'primary_link', 'trunk_link', 'motorway_link') and (bridge is null or not bridge in ('yes', 'true', '1')) and (tunnel is null or not tunnel in ('yes', 'true', '1')) order by z_order) as highways",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2501076.96,6291980.67,3701032.51,7631846.4",
        "dbname": "gis",
        "id": "highways",
        "project": "veloroad",
        "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
      },
      "id": "highways",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "highways"
    },
    {
      "geometry": "linestring",
      "extent": [
        23.179674121864707,
        51.27266501642914,
        32.750452180655266,
        56.16550391115494
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(\nselect way from planet_osm_line where barrier is not null\nunion all \nselect way from planet_osm_polygon where barrier is not null\n) p",
        "key_field": "",
        "geometry_field": "",
        "extent_cache": "custom",
        "extent": "",
        "dbname": "gis"
      },
      "id": "barriers",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "barriers"
    },
    {
      "geometry": "linestring",
      "extent": [
        -179.9999999749438,
        -85.051,
        179.9999999749438,
        85.051
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way, highway, tracktype, (case when living_street is not null or service is not null then 1 else 0 end) as service from planet_osm_line where highway in ('path', 'cycleway', 'footway', 'service', 'track','pedestrian','living_street','residential', 'unclassified', 'tertiary', 'secondary', 'primary', 'trunk', 'motorway', 'tertiary_link', 'secondary_link', 'primary_link', 'trunk_link', 'motorway_link') and bridge in ('yes', 'true', '1') order by z_order) as bridges",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis"
      },
      "id": "bridges",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "bridges"
    },
    {
      "geometry": "point",
      "extent": [
        23.048804047844566,
        51.26288996353496,
        33.24694070756235,
        56.173291296246354
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,coalesce(\"name:be\", name) as name from planet_osm_point where railway='subway_entrance') as subway",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2565781.13,6667928.32,3701032.51,7592990.68",
        "dbname": "gis"
      },
      "id": "subway",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "subway"
    },
    {
      "geometry": "point",
      "extent": [
        23.048804047844566,
        51.26288996353496,
        33.24694070756235,
        56.173291296246354
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,place,coalesce(\"name:be\", \"name:ru\", name) as name,(case when place='city' then 9 when place='town' then 8 when place='village' then 7 when place='hamlet' then 6 when place='suburb' then 5 when place='locality' then 4 when place in ('isolated_dwelling', 'allotments') then 3 else 0 end) as p_order, (case when coalesce(population, '')~E'^\\\\d+$' then population::int else 0 end) as pop from planet_osm_point where place in ('village', 'town', 'city', 'hamlet', 'suburb', 'locality', 'isolated_dwelling', 'island', 'allotments') order by p_order desc, pop desc) as places",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2565781.13,6667928.32,3701032.51,7592990.68",
        "dbname": "gis",
        "id": "places",
        "project": "lineart",
        "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
      },
      "id": "places",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "places"
    },
    {
      "geometry": "point",
      "extent": [
        23.048804047844566,
        51.26288996353496,
        33.24694070756235,
        56.173291296246354
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,railway,station,coalesce(\"name:be\", name) as name,length(coalesce(\"name:be\", name)) as len,(select 90+degrees(ST_Azimuth(ST_StartPoint(inter), ST_EndPoint(inter))) from (select ST_Intersection(r.way, ST_Buffer(p.way, 100)) as inter from planet_osm_line r where r.railway in ('rail', 'narrow_gauge') and r.way && ST_Buffer(p.way, 100) order by ST_Distance(r.way, p.way) limit 1) rr) as angle from planet_osm_point p where railway in ('station', 'halt') and (station is null or (station != 'subway' and station != 'disused'))) as stations",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2565781.13,6667928.32,3701032.51,7592990.68",
        "dbname": "gis",
        "id": "stations",
        "project": "lineart",
        "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over"
      },
      "id": "stations",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "stations"
    },
    {
      "geometry": "linestring",
      "extent": [
        22.467556599271887,
        49.10078991480273,
        33.24694070756235,
        56.36710850981006
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way, highway,(case when ref = 'А-118' then 'КАД' when length(ref) <= 5 then ref else null end) as ref,coalesce(\"name:be\", name) AS name from planet_osm_line where highway in ('tertiary', 'secondary', 'primary', 'trunk', 'motorway')) as highwaysh",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2501076.96,6291980.67,3701032.51,7631846.4",
        "dbname": "gis"
      },
      "id": "hlabels",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "hlabels"
    },
    {
      "geometry": "linestring",
      "extent": [
        22.467556599271887,
        49.10078991480273,
        33.24694070756235,
        56.36710850981006
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,waterway,coalesce(\"name:be\", name) AS name from planet_osm_line where waterway in ('river', 'canal') and tunnel is null) as rivers",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2501076.96,6291980.67,3701032.51,7631846.4",
        "dbname": "gis"
      },
      "id": "wlabels",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "wlabels"
    },
    {
      "geometry": "linestring",
      "extent": [
        22.467556599271887,
        49.10078991480273,
        33.24694070756235,
        56.36710850981006
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(\nselect \n    streethash,\n    case when ST_X(ST_LineInterpolatePoint(way, 0.5)) > ST_X(ST_StartPoint(way)) then way else ST_Reverse(way) end\n    as way,\n    name\nfrom (\n    select \n        left(md5(street), 1) as streethash, \n        (ST_Dump(ST_Simplify(ST_LineMerge(ST_Union(ST_SnapToGrid(way, 2*!pixel_height!))), 4*!pixel_height!))).geom as way, \n        replace(replace(replace(replace(replace(replace(name, 'завулак', 'зав.'), 'вуліца', 'вул.'), 'набережная', 'наб.'), 'улица', 'ул.'), 'проспект', 'пр.'), 'переулок', 'пер.') as name \n    from (\n        select \n            name as street,\n            way, \n            coalesce(\"name:be\", name) AS name \n        from planet_osm_line \n        where \n            highway is not null and \n            name is not null and \n            way && !bbox!) p \n        group by \n            name, \n            streethash\n    ) pp \n    order by ST_Length(way) desc\n) as highwaysl",
        "key_field": "",
        "geometry_field": "",
        "extent_cache": "auto",
        "extent": "2501076.96,6291980.67,3701032.51,7631846.4",
        "dbname": "gis"
      },
      "id": "hslabels",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "hslabels"
    },
    {
      "extent": [
        22.71561208176848,
        51.024301313540015,
        32.79624694636674,
        56.36838768819846
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,way_area, coalesce(\"name:be\", name) AS name from planet_osm_polygon where leisure = 'park') as wol",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2528690.37,6625593.47,3650861.51,7632103.5",
        "dbname": "gis"
      },
      "id": "plabels",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "plabels",
      "geometry": "polygon"
    },
    {
      "extent": [
        22.71561208176848,
        51.024301313540015,
        32.79624694636674,
        56.36838768819846
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select place, coalesce(\"name:be\", name) as name, ST_PointOnSurface(way) as way, way_area from planet_osm_polygon where place='island' order by way_area desc) as islands",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2528690.37,6625593.47,3650861.51,7632103.5",
        "dbname": "gis"
      },
      "id": "islands",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "islands",
      "geometry": "point"
    },
    {
      "geometry": "polygon",
      "extent": [
        22.71561208176848,
        51.024301313540015,
        32.79624694636674,
        56.36838768819846
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select way,way_area, coalesce(\"name:be\", name) AS name from planet_osm_polygon where \"natural\" = 'water' and (water is null or water != 'river')) as wol",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "auto",
        "extent": "2528690.37,6625593.47,3650861.51,7632103.5",
        "dbname": "gis"
      },
      "id": "wolabels",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {},
      "name": "wolabels"
    },
    {
      "geometry": "linestring",
      "extent": [
        -180,
        -85.051,
        180,
        85.051
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(select id+1 as id, (case when id<n or id>n*2+1 or (id-n > 1 and id < n*2) then '' when id < n*2 then cast((id-n)*scale as text) when id=n*2 then (n*scale)||' км' else 'Карта © OpenStreetMap' end) as label, id%2 as id2,\n(case when id < n then ST_MakeLine(st_project(st_project(pt, 1000*scale*n/2, -pi()/2), 1000*scale*id, pi()/2)::geometry,\nst_project(st_project(pt, 1000*scale*n/2, -pi()/2), 1000*scale*(id+1), pi()/2)::geometry)\nwhen id <= n*2 then st_project(st_project(pt, 1000*scale*n/2, -pi()/2), 1000*scale*(id-n), pi()/2)::geometry\nelse pt\nend) as way\nfrom\n(select 5 as n, 1 as scale, ST_SetSRID(ST_Point(30, 60), 4326) as pt) d,\ngenerate_series(0, 11) id) as scale",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "custom",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis",
        "id": "scale",
        "project": "lineart",
        "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
      },
      "id": "scale",
      "class": "",
      "srs-name": "WGS84",
      "srs": "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs",
      "advanced": {},
      "name": "scale",
      "status": "off"
    },
    {
      "geometry": "linestring",
      "extent": [
        -179.9999999749438,
        -85.051,
        179.9999999749438,
        85.051
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(\nwith \nhousenumbers as (\n    select \n        \"addr:housenumber\" as hno,\n        \"addr:street\", \n        way,\n        way as point \n    from planet_osm_point \n    where (\n    \"addr:housenumber\" is not null\n    and shop is null\n    and office is null\n    and amenity is null\n    and way && !bbox!) \n\n    union all\n\n    select \n        \"addr:housenumber\" as hno,\n        \"addr:street\", \n        way,\n        ST_PointOnSurface(way) as point \n    from planet_osm_polygon \n    where (\"addr:housenumber\" is not null and way_area > 2*3*!pixel_height!*!pixel_width! and way && !bbox!)\n),\nhouse_extent as (select ST_Expand(ST_Extent(way), 600) extent from housenumbers),\nstreets as (\n    select way, name, highway from planet_osm_line l, house_extent where l.name is not null and l.highway is not null and l.way && extent\n    union all\n    select ST_Centroid(way), name, highway from planet_osm_polygon l, house_extent where l.name is not null and l.highway is not null and l.way && extent\n),\nstreet_length as (\n    select sum(ST_Length(way)) as len, name from streets group by name\n)\n    -- stupid mapnik asks 5 first buildings in the world to get geometry type.\n    -- that fucks everything up because of ordering by distance to street.\n    -- let's feed it with something while waiting for something better\n    select 0 as angle, ''::text as hno, ST_GeomFromEWKT('SRID=900913;LINESTRING(-200 0, 200 0)') as way, ''::text as highway\n        union all\n    select 0 as angle, ''::text as hno, ST_GeomFromEWKT('SRID=900913;LINESTRING(-200 0, 200 0)') as way, ''::text as highway\n        union all\n    select 0 as angle, ''::text as hno, ST_GeomFromEWKT('SRID=900913;LINESTRING(-200 0, 200 0)') as way, ''::text as highway\n        union all\n    select 0 as angle, ''::text as hno, ST_GeomFromEWKT('SRID=900913;LINESTRING(-200 0, 200 0)') as way, ''::text as highway\n        union all\n    select 0 as angle, ''::text as hno, ST_GeomFromEWKT('SRID=900913;LINESTRING(-200 0, 200 0)') as way, ''::text as highway\n        union all\n    select \n        angle,\n        hno || case \n            when \n                angle > 75 and \n                angle < 275 and\n                (hno like '%6%' or hno like '%9%')\n            then '.' \n            else '' \n        end, \n        way,\n        highway\n        from (            \n        select\n            hno,\n            angle,\n            point as way,\n            highway\n        from \n            housenumbers h\n            left outer join lateral (select ST_Distance(h.way, l.way) dist, name, way, highway from streets l where l.name = h.\"addr:street\" order by 1 asc limit 1) l on true\n            left outer join street_length sl on (sl.name = h.\"addr:street\")\n            left outer join lateral (\n                select \n                    mod(case when angle > 90 and angle < 270 then 180+angle else angle end::integer, 360) angle\n                from (\n                select\n                    360 - degrees(ST_Azimuth(\n                        ST_StartPoint(ST_ShortestLine(h.point, l.way)),\n                        ST_EndPoint(ST_ShortestLine(h.point, l.way))\n                    )) angle) p\n            ) a on true\n            left outer join lateral (select ST_Distance(h.way, l.way) dist, name from streets l where l.name != h.\"addr:street\" order by 1 asc limit 1) fs on true\n            left outer join street_length fsl on (fsl.name = fs.name)\n        --where l.highway in ('tertiary', 'secondary', 'primary')\n        where (l.dist > !pixel_height!*3 or l.dist is null) and (fs.dist > !pixel_height!*2 or fs.dist is null)\n        order by \n            sl.len desc, -- longer streets need more housenumbers\n            fsl.len desc, -- crossings with longer streets need more attention\n            round(fs.dist/10) asc, -- better to show houses closer to crossings\n            least(angle, 360-angle) asc -- better to show upright labels\n            --(hno like '%0' or hno like '%1') -- better to show round numbers\n    ) p\n) p\n",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "custom",
        "extent": "-20037508.34,-20037508.34,20037508.34,20037508.34",
        "dbname": "gis",
        "srid": "900913"
      },
      "id": "hnolabels",
      "class": "",
      "srs-name": "900913",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0.0 +k=1.0 +units=m +nadgrids=@null +wktext +no_defs +over",
      "advanced": {
        "srid": "900913"
      },
      "name": "hnolabels"
    },
    {
      "geometry": "linestring",
      "extent": [
        -180,
        -85.051,
        180,
        85.051
      ],
      "Datasource": {
        "type": "postgis",
        "table": "(\nwith buildings as (\n    select \n        (ST_Dump(ST_Union(way))).geom as way, \n        minhei, \n        hei \n    from (\n        select  \n            way,\n            (CASE WHEN z.\"height\" ~ E'^(-)?[[:digit:]]+([.][[:digit:]]+)?$' THEN CAST (z.\"height\" AS FLOAT) ELSE\n             CASE WHEN z.\"building:levels\" ~ E'^(-)?[[:digit:]]+([.][[:digit:]]+)?$' THEN CAST (z.\"building:levels\" AS FLOAT) * 3 ELSE 0 END END) as hei,\n            (CASE WHEN z.\"min_height\" ~ E'^(-)?[[:digit:]]+([.][[:digit:]]+)?$' THEN CAST (z.\"min_height\" AS FLOAT) ELSE\n             CASE WHEN z.\"building:min_level\" ~ E'^(-)?[[:digit:]]+([.][[:digit:]]+)?$' THEN CAST (z.\"building:min_level\" AS FLOAT) * 3 ELSE 0 END END) as minhei\n        from (\n            select  \n                ST_Buffer(way,0) as way, \n                \"building:levels\", \n                \"height\", \n                \"building:min_level\", \n                \"min_height\" \n            from\n                planet_osm_polygon p \n            where (\n                \"building:part\" is not NULL or \n                (\n                    (building is not NULL) and \n                        not exists(select way from planet_osm_polygon pol where ST_Intersects(p.way, pol.way) and pol.\"building:part\" is not NULL)) \n                    or \"man_made\" in ('chimney', 'tower') \n                    or (area is not NULL and barrier in ('fence','wall') ) \n                ) \n                and (\n                    height is not NULL or \n                    \"building:levels\" is not NULL\n                ) and way && ST_Expand(!bbox!,700)\n\n        union all\n\n        select \n            ST_Buffer(way,10), \n            \"building:levels\", \n            \"height\", \n            \"building:min_level\", \n            \"min_height\" \n        from\n            planet_osm_point  \n        where (\n            building is not NULL or \n            \"man_made\" in ('chimney', 'tower') \n        ) and (\n            height is not NULL or \n            \"building:levels\" is not NULL) \n        and way && st_Expand(!bbox!,500)\n\n        union all\n\n        select \n            ST_Buffer(way,CASE WHEN \"width\" ~ E'^(-)?[[:digit:]]+([.][[:digit:]]+)?$' THEN CAST (\"width\" AS FLOAT) ELSE 0.1 END, 'endcap=flat'), \n            \"building:levels\", \n            case when \"height\" is not NULL then height else '2.5' end as height, \n            \"building:min_level\", \n            \"min_height\" \n        from\n            planet_osm_line  \n        where (\n            building is not NULL or \n            \"man_made\" in ('chimney', 'tower') or \n            barrier in ('fence','wall','hedge')\n        ) and way && ST_Expand(!bbox!, 500)\n\n        union all\n        \n        select \n            ST_Buffer(ST_Boundary(way), 0.1), \n            \"building:levels\", \n            case when \"height\" is not NULL then height else '2.5' end as height, \n            \"building:min_level\", \n            \"min_height\" \n        from\n            planet_osm_polygon \n        where (barrier in ('fence','wall')) and \"area\" is NULL and way && ST_Expand(!bbox!, 500)\n    ) z\n\n    union all\n\n    select \n        b.way, \n        case when a.residential = 'urban' then 9*1 else 3*1 end as hei, \n        0 as minhei \n    from \n        planet_osm_polygon b \n        left outer join planet_osm_polygon a on ( a.residential is not null and ST_DWithin(b.way, a.way, 0) )\n    where         \n        b.way && !bbox! and\n        b.building is not NULL and\n        b.\"building:levels\" is NULL and \n        b.height is NULL and \n        not exists(select way from planet_osm_polygon pol where ST_Intersects(b.way, pol.way) and pol.\"building:part\" is not NULL)\n        \n)  p  \ngroup by minhei, hei\n)\n\n\nselect ST_GeomFromEWKT('SRID=900913;LINESTRING(-200 0, 200 0)') as way, 0 as lea, 0 as hv, ''::text as visible, 0.0 as azim, 0 as minhei, 0 as hei, ''::text as fill union all\nselect ST_GeomFromEWKT('SRID=900913;LINESTRING(-200 0, 200 0)') as way, 0 as lea, 0 as hv, ''::text as visible, 0.0 as azim, 0 as minhei, 0 as hei, ''::text as fill union all\nselect ST_GeomFromEWKT('SRID=900913;LINESTRING(-200 0, 200 0)') as way, 0 as lea, 0 as hv, ''::text as visible, 0.0 as azim, 0 as minhei, 0 as hei, ''::text as fill union all\nselect ST_GeomFromEWKT('SRID=900913;LINESTRING(-200 0, 200 0)') as way, 0 as lea, 0 as hv, ''::text as visible, 0.0 as azim, 0 as minhei, 0 as hei, ''::text as fill union all\nselect ST_GeomFromEWKT('SRID=900913;LINESTRING(-200 0, 200 0)') as way, 0 as lea, 0 as hv, ''::text as visible, 0.0 as azim, 0 as minhei, 0 as hei, ''::text as fill union all\n\nselect * from (\n    -- Walls fill\n    select \n        (ST_ConvexHull(\n            ST_Collect(ST_MakeLine(ST_Translate(p2, 0, minhei), ST_Translate(p1, 0, minhei)), \n                            ST_MakeLine(ST_Translate(p2,0,hei),ST_Translate(p1,0,hei))))) as way, \n        LEAST(ST_Y(p1),ST_Y(p2)) as lea, \n        1 as hv,\n        case when ST_X(p1) > ST_X(p2) then 'yes' else 'no' end as visible,\n        degrees(ST_Azimuth(p2,p1)) as azim, \n        minhei, \n        hei, \n        'area' as fill\n\n    from (\n    select (ST_PointN(way,generate_series(1, ST_NPoints(way)-1))) as p1, \n            (ST_PointN(way,generate_series(2, ST_NPoints(way)))  ) as p2, hei*2 as hei, minhei*2 as minhei \n                from (select (ST_Dump(ST_Boundary(ST_ForceRHR(ST_SimplifyPreserveTopology(way,.4))))).geom as way,minhei, hei from buildings) p) a \n\n                \n    union all\n    -- Roofs\n\n    select \n        ST_Translate(way,0,hei) as way, \n        ST_YMin(way) as lea, \n        2 as hv, \n        'yes-h' as visible, \n        -500 as azim, \n        (hei-0.0001) as minhei, \n        hei, \n        'area' as fill\n    from (\n        select \n            case when o.way IS NOT NULL then ST_Difference(n.way,o.way) else n.way end as way, \n            n.minhei*2 as minhei, \n            n.hei*2 as hei  \n        from buildings n \n        LEFT OUTER JOIN (select ST_Union(way) as way, minhei from buildings group by minhei) o on (n.hei = o.minhei)  \n    ) p\n\n    union all\n    -- Walls lines\n\n    select (ST_MakeLine(ST_Translate(p2,0,minhei),ST_Translate(p2,0,hei))) as way, LEAST(ST_Y(p1),ST_Y(p2)) as lea, 1 as hv,\n    case when ST_X(p1)>ST_X(p2) then 'yes-v' else 'no-v' end as visible, \n    ST_Azimuth(p2,p1)/3.14159265358*180 as azim, minhei, hei, 'line' as fill\n\n\n    from (\n    select (ST_PointN(way,generate_series(1, ST_NPoints(way)-1))) as p1,\n            (ST_PointN(way,generate_series(2, ST_NPoints(way)))  ) as p2, hei*2 as hei, minhei*2 as minhei\n                from (select (ST_Dump(ST_Boundary(ST_ForceRHR(ST_SimplifyPreserveTopology(way,.4))))).geom as way,minhei, hei from buildings) p) a\n\n    union all\n    -- Roofs lines\n\n    select ST_Translate(way,0,hei) as way, ST_YMin(way) as lea, 2 as hv, 'no-h' as visible, -500 as azim, 0 as minhei, hei, 'line' as fill\n                    from (select case when o.way IS NOT NULL then ST_SymDifference(n.way,o.way) else n.way end as way, n.hei*2 as hei\n    from (select ST_Union(way) as way, hei from buildings group by  hei) n LEFT OUTER JOIN (select ST_Union(way) as way, minhei from buildings group by minhei) o on (n.hei = o.minhei)  ) p\n    \n\n    union all\n    -- Bottom lines\n    \n    select way, ST_YMin(way) as lea, 3 as hv, 'no-h' as visible, -500 as azim, minhei, hei, 'line' as fill\n                    from (select  n.way as way, n.minhei *2 as minhei, n.hei*2 as hei\n    from buildings n where n.minhei=0 ) p\n\n    union all\n    -- Shadows\n    \n    \n    select \n    ST_Difference(a.way,  b.way) as way,\n\n    0 as lea, 3 as hv,\n    'shadow' as visible,\n    -500 as azim, 0 as minhei, 0 as hei, 'area' as fill\n\n\n    from ( select ST_Buffer(ST_Collect(way),0) as way from(\n    select ST_ConvexHull(ST_Collect(ST_MakeLine(ST_Translate(p2,minhei*1.5,minhei),ST_Translate(p1,minhei*1.5,minhei)), \n    ST_MakeLine(ST_Translate(p2,hei*1.5,hei),ST_Translate(p1,hei*1.5,hei))))       as way\n\n\n    from (\n    select (ST_PointN(way,generate_series(1, ST_NPoints(way)-1))) as p1,\n            (ST_PointN(way,generate_series(2, ST_NPoints(way)))  ) as p2, hei as hei, minhei as minhei\n                from (select (ST_Dump(ST_Boundary(ST_ForceRHR(ST_SimplifyPreserveTopology(way,.4))))).geom as way,minhei, hei from buildings) p) a\n\n\n    union all\n    select ST_Translate(way, hei*1.5, hei) as way   from buildings \n    ) a ) a, (select ST_Buffer(ST_Collect(way),0) as way from buildings where minhei=0 ) b\n    order by minhei, lea DESC,fill,hv, hei\n) p\n) p",
        "key_field": "",
        "geometry_field": "way",
        "extent_cache": "custom",
        "extent": "-20037508.342789244, -20037508.342780735, 20037508.342789244, 20037508.342780709",
        "dbname": "gis"
      },
      "id": "buildings3d",
      "class": "",
      "srs-name": "custom",
      "srs": "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs +over",
      "advanced": {},
      "name": "buildings3d"
    }
  ],
  "scale": 1,
  "metatile": 3,
  "name": "Belroad",
  "description": "",
  "attribution": ""
}